<?php

namespace Tests\Feature;

use App\Contact;
use Carbon\Carbon;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class ContactsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();


    }

    public function test_a_list_of_contacts_can_be_fetched_for_the_authenticated_user()
    {
        $this->withoutExceptionHandling();
        $user        = factory(User::class)->create();
        $anotherUser = factory(User::class)->create();

        $contact        = factory(Contact::class)->create(['user_id' => $user->id]);
        $anotherContact = factory(Contact::class)->create(['user_id' => $anotherUser->id]);

        $response = $this->get('/api/contacts?api_token='.$user->api_token);


        $response->assertJsonCount(1)
                 ->assertJson([
                     'data' => [
                         [
                             'data' =>
                                 ['contact_id' => $contact->id]

                         ]
                     ]
                 ]);


    }

    public function test_an_unauthenticated_user_should_redirect_to_login()
    {
        $response = $this->post('/api/contacts',
            array_merge($this->data(), ['api_token' => '']));

        $response->assertRedirect('/login');
        $this->assertCount(0, Contact::all());
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_an_authenticated_user_can_add_contact()
    {
        $this->withoutExceptionHandling();


        $response = $this->post('/api/contacts',
            array_merge($this->data(), ['api_token' => $this->user->api_token]));

        $contact = Contact::first();

        $this->assertEquals('Test name', $contact->name);
        $this->assertEquals('1@gmail.com', $contact->email);
        $this->assertEquals('05/14/1988', $contact->birthday->format('m/d/Y'));
        $this->assertEquals('ABC string', $contact->company);
        $response->assertStatus(Response::HTTP_CREATED);
        $response->assertJson([
            'data'  => [
                'contact_id' => $contact->id
            ],
            'links' => [
                'self' => $contact->path()
            ]
        ]);
    }


    public function test_fields_are_required()
    {

        collect(['name', 'email', 'birthday', 'company'])->each(function ($field) {
            $response = $this->post('/api/contacts',
                array_merge($this->data(), [$field => '']));
            $response->assertSessionHasErrors($field);
            $this->assertCount(0, Contact::all());
        });
    }

    public function test_email_must_be_a_valid_email()
    {
        $response = $this->post('/api/contacts',
            array_merge($this->data(), ['email' => 'NOT AN EMAIL']));
        $response->assertSessionHasErrors('email');
        $this->assertCount(0, Contact::all());
    }

    public function test_birthday_are_properly_stored()
    {
        $this->withoutExceptionHandling();
        $response = $this->post('/api/contacts',
            array_merge($this->data()), ['birthday' => 'May 14, 1988']);

        $this->assertCount(1, Contact::all());
        $this->assertInstanceOf(Carbon::class, Contact::first()->birthday);
        $this->assertEquals('05-14-1988', Contact::first()->birthday->format('m-d-Y'));

    }

    public function test_a_contact_can_be_retrieved()
    {
        $contact  = factory(Contact::class)->create(['user_id' => $this->user->id]);
        $response = $this->get('/api/contacts/'.$contact->id.'?api_token='.$this->user->api_token);


        $response->assertJson([
            'data' => [
                'contact_id'   => $contact->id,
                'name'         => $contact->name,
                'email'        => $contact->email,
                'birthday'     => $contact->birthday->format('m/d/Y'),
                'company'      => $contact->company,
                'last_updated' => $contact->updated_at->diffForHumans()
            ]
        ]);

    }

    public function test_only_the_users_contacts_can_be_retrieved()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $anotherUser = factory(User::class)->create();
        $response    = $this->get('/api/contacts/'.
                                  $contact->id.'?api_token='.
                                  $anotherUser->api_token);


        $response->assertStatus(403);


    }

    public function test_a_contact_can_be_patched()
    {

        $contact  = factory(Contact::class)->create(['user_id' => $this->user->id]);
        $response = $this->patch('/api/contacts/'.$contact->id, $this->data());

        $contact = $contact->fresh();
        $this->assertEquals('Test name', $contact->name);
        $this->assertEquals('1@gmail.com', $contact->email);
        $this->assertEquals('05/14/1988', $contact->birthday->format('m/d/Y'));
        $this->assertEquals('ABC string', $contact->company);
        $response->assertStatus(Response::HTTP_OK);
        $response->assertJson([
            'data'  => [
                'contact_id' => $contact->id
            ],
            'links' => [
                'self' => $contact->path()
            ]
        ]);
    }

    public function test_only_owner_contact_can_patch_the_contact()
    {

        $contact     = factory(Contact::class)->create();
        $anotherUser = factory(User::class)->create();
        $response    = $this->patch('/api/contacts/'.$contact->id,
            array_merge($this->data(), ['api_token' => $anotherUser->api_token])

        );

        $response->assertStatus(403);

    }

    public function test_a_contact_can_be_deleted()
    {
        $contact  = factory(Contact::class)->create(['user_id' => $this->user->id]);
        $response = $this->delete('/api/contacts/'.$contact->id, ['api_token' => $this->user->api_token]);
        $this->assertCount(0, Contact::all());
        $response->assertStatus(Response::HTTP_NO_CONTENT);

    }

    public function test_only_the_owner_can_delete_the_contact()
    {
        $contact     = factory(Contact::class)->create();
        $anotherUser = factory(User::class)->create();
        $response    = $this->delete('/api/contacts/'.$contact->id,
            ['api_token' => $anotherUser->api_token]
        );

        $response->assertStatus(403);


    }

    private function data()
    {
        return [
            'name'     => 'Test name',
            'email'    => '1@gmail.com',
            'birthday' => '05/14/1988',
            'company'  => 'ABC string',

            'api_token' => $this->user->api_token
        ];
    }
}
